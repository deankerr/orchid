#!/usr/bin/env bun
import { createHash } from 'node:crypto'
import { mkdir, readdir, readFile, unlink, writeFile } from 'node:fs/promises'
import { join } from 'node:path'

import { optimize } from 'svgo'

// Configuration
const LUCIDE_STATIC_PATH = 'node_modules/lucide-static/icons'
const OUTPUT_DIR = 'public/sprites'
const SPRITE_FILE = 'lucide-sprite.svg'
const TYPES_FILE = 'lib/sprite-icons.ts'

// Icons used in endpoints data grid system
const REQUIRED_ICONS = [
  // Core data grid icons
  'audio-lines',
  'brain-cog',
  'database',
  'flag',
  'globe',
  'image',

  // Attribute system icons
  'alarm-clock',
  'braces',
  'cake-slice',
  'calendar',
  'chevrons-down',
  'fingerprint',
  'letter-text',
  'link',
  'message-square',
  'messages-square',
  'octagon-x',
  'skull',
  'siren',
  'save',
  'scan-eye',
  'scroll-text',
  'shield-alert',
  'square-stop',
  'wrench',

  // Modality badge icons
  'file-chart-column-increasing',
  'image-down',
  'image-up',

  'bug',
] as const

interface SpriteConfig {
  width?: number
  height?: number
  viewBox?: string
  className?: string
}

const DEFAULT_CONFIG: Required<SpriteConfig> = {
  width: 24,
  height: 24,
  viewBox: '0 0 24 24',
  className: 'lucide-icon',
}

/**
 * Load and optimize an SVG icon from lucide-static
 */
async function loadIcon(iconName: string): Promise<string> {
  const iconPath = join(LUCIDE_STATIC_PATH, `${iconName}.svg`)

  try {
    const svgContent = await readFile(iconPath, 'utf-8')

    // Optimize the SVG with basic optimization
    const result = optimize(svgContent, {
      plugins: [
        'preset-default',
        'removeDimensions', // Remove width/height attributes
      ],
    })

    if ('error' in result) {
      throw new Error(`SVGO optimization failed: ${result.error}`)
    }

    return result.data
  } catch (error) {
    throw new Error(`Failed to load icon "${iconName}": ${error}`)
  }
}

/**
 * Extract the inner content of an SVG (everything inside <svg> tags)
 */
function extractSvgContent(svgString: string): string {
  const match = svgString.match(/<svg[^>]*>([\s\S]*?)<\/svg>/)
  if (!match) {
    throw new Error('Invalid SVG format')
  }
  return match[1].trim()
}

/**
 * Generate the sprite SVG file
 */
async function generateSprite(
  icons: Map<string, string>,
  config: Required<SpriteConfig>,
): Promise<string> {
  const symbols = Array.from(icons.entries())
    .map(([name, content]) => {
      return `  <symbol id="lucide-${name}" viewBox="${config.viewBox}">
${content
  .split('\n')
  .map((line) => `    ${line}`)
  .join('\n')}
  </symbol>`
    })
    .join('\n')

  return `<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
${symbols}
</svg>`
}

/**
 * Generate TypeScript definitions and utilities
 */
function generateTypes(iconNames: string[], spriteFileName: string): string {
  const iconNamesType = iconNames.map((name) => `  | '${name}'`).join('\n')

  return `// Auto-generated file - do not edit manually
// Generated by scripts/generate-sprite.ts

export type SpriteIconName =
${iconNamesType}

/**
 * Get the sprite URL for an icon (for use in <use> elements)
 */
export function getSpriteUrl(iconName: SpriteIconName): string {
  return \`/sprites/${spriteFileName}#lucide-\${iconName}\`
}
`
}

/**
 * Main sprite generation function
 */
async function generateSpritesheet() {
  console.log('üé® Generating Lucide sprite sheet...')
  console.log(`üìã Processing ${REQUIRED_ICONS.length} icons`)

  const config = { ...DEFAULT_CONFIG }
  const icons = new Map<string, string>()
  const errors: string[] = []

  // Load all required icons
  for (const iconName of REQUIRED_ICONS) {
    try {
      console.log(`  üì¶ Loading ${iconName}...`)
      const svgContent = await loadIcon(iconName)
      const innerContent = extractSvgContent(svgContent)
      icons.set(iconName, innerContent)
    } catch (error) {
      const errorMsg = `Failed to load ${iconName}: ${error}`
      console.error(`  ‚ùå ${errorMsg}`)
      errors.push(errorMsg)
    }
  }

  if (errors.length > 0) {
    console.error(`\n‚ùå ${errors.length} icons failed to load:`)
    errors.forEach((error) => console.error(`   ${error}`))

    if (errors.length === REQUIRED_ICONS.length) {
      throw new Error('All icons failed to load')
    }

    console.log(`\n‚ö†Ô∏è  Continuing with ${icons.size} successfully loaded icons...`)
  }

  // Ensure output directory exists
  await mkdir(OUTPUT_DIR, { recursive: true })

  // Generate sprite file
  console.log('\nüîß Generating sprite file...')
  const spriteContent = await generateSprite(icons, config)

  // Generate content hash for cache busting
  const contentHash = createHash('md5').update(spriteContent).digest('hex').slice(0, 8)
  const spriteFileName = `lucide-sprite.${contentHash}.svg`
  const spritePath = join(OUTPUT_DIR, spriteFileName)

  // Clean up old sprite files
  try {
    const existingFiles = await readdir(OUTPUT_DIR)
    const oldSpriteFiles = existingFiles.filter(
      (file) =>
        file.startsWith('lucide-sprite.') && file.endsWith('.svg') && file !== spriteFileName,
    )

    for (const oldFile of oldSpriteFiles) {
      await unlink(join(OUTPUT_DIR, oldFile))
      console.log(`  üóëÔ∏è  Removed old sprite: ${oldFile}`)
    }
  } catch (error) {
    console.warn(`  ‚ö†Ô∏è  Could not clean old sprites: ${error}`)
  }

  await writeFile(spritePath, spriteContent, 'utf-8')
  console.log(`  ‚úÖ Sprite saved to: ${spritePath}`)

  // Generate TypeScript definitions
  console.log('üìù Generating TypeScript definitions...')
  const typesContent = generateTypes(Array.from(icons.keys()), spriteFileName)
  await writeFile(TYPES_FILE, typesContent, 'utf-8')
  console.log(`  ‚úÖ Types saved to: ${TYPES_FILE}`)

  // Summary
  console.log(`\nüéâ Sprite generation complete!`)
  console.log(`   üìä ${icons.size} icons processed`)
  console.log(`   üìÅ Sprite: ${spritePath} (hash: ${contentHash})`)
  console.log(`   üìÅ Types: ${TYPES_FILE}`)

  if (errors.length > 0) {
    console.log(`   ‚ö†Ô∏è  ${errors.length} icons had errors`)
  }
}

/**
 * CLI interface
 */
async function main() {
  const args = process.argv.slice(2)

  if (args.includes('--help') || args.includes('-h')) {
    console.log(`üé® Lucide Sprite Generator

Usage: bun scripts/generate-sprite.ts [options]

Options:
  --help, -h    Show this help message

This script generates an SVG sprite sheet from Lucide icons used in the
endpoints data grid system. It creates:
  - ${OUTPUT_DIR}/${SPRITE_FILE} - The sprite SVG file
  - ${TYPES_FILE} - TypeScript definitions

The sprite includes ${REQUIRED_ICONS.length} icons specifically used in the endpoints
data grid components for optimal performance.`)
    return
  }

  try {
    await generateSpritesheet()
  } catch (error) {
    console.error('‚ùå Sprite generation failed:', error)
    process.exit(1)
  }
}

// Handle script execution
if (import.meta.main) {
  main().catch((error) => {
    console.error('‚ùå Unexpected error:', error)
    process.exit(1)
  })
}

export { generateSpritesheet, REQUIRED_ICONS }

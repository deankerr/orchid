---
description: 
globs: 
alwaysApply: true
---
# Projection System

## Overview

The ORCHID projection system transforms raw snapshot data into optimized, denormalized structures designed for lightning-fast queries. This system processes the comprehensive but complex OpenRouter API responses into clean, consistent data models that eliminate identifier confusion and provide excellent query performance.

**All projection data is derived state** that can be completely regenerated from snapshots at any time. See `notes/philosophy.md` for core principles.

## Architecture

### Core Principles

- **Expendable Derived State**: All projections can be voided and regenerated from snapshots
- **Epoch-Based Validity**: Each entity has an `epoch` field indicating when it was last valid
- **Temporal Awareness**: Missing data in epochs indicates unavailability, not errors
- **Graceful Degradation**: Individual processing failures don't halt the entire pipeline
- **Idempotent Processing**: Reprocessing any epoch produces identical results

### Data Flow

```
Snapshot Completion → Projection Trigger → Validation → Transformation → Upsert Tables
       ↓                     ↓              ↓              ↓              ↓
   Hourly Signal        Single Function   Zod Schemas   Clean Objects   Current State
```

### Processing Strategy

**[PROPOSAL]** Projections are triggered after complete snapshot collection for an epoch. The system:

1. Tracks the current "projection epoch" - all data up to this point has been processed
2. Can regenerate from any historical epoch, voiding all data after that point
3. Uses pagination/stepping to work through large datasets incrementally
4. Maintains idempotency - reprocessing produces identical results

## Data Models

### Primary Tables

#### `endpoints` **[PROPOSAL]** - The Core Queryable Entity

```typescript
{
  // Identity
  id: string                    // OpenRouter endpoint UUID
  modelId: string              // Our normalized model identifier
  epoch: number                // When this data was last valid

  // Display
  name: string                 // Endpoint display name
  modelName: string            // Denormalized from model
  modelShortName: string       // Denormalized from model
  modelAuthor: string          // Denormalized from model

  // Provider
  providerName: string         // Internal provider name
  providerDisplayName: string  // User-facing provider name
  providerSlug: string         // Provider identifier
  providerModelId: string      // Provider's model ID
  providerRegion: string | null

  // Configuration
  variant: string              // standard, free, thinking, extended, etc.
  quantization: string | null  // fp16, int8, etc.
  contextLength: number        // Actual context length for this endpoint

  // Capabilities (denormalized for fast filtering)
  supportsImages: boolean      // From model input_modalities
  supportsFiles: boolean       // From model input_modalities
  supportsToolParameters: boolean
  supportsReasoning: boolean
  supportsMultipart: boolean
  hasCompletions: boolean
  hasChatCompletions: boolean

  // Limits & Constraints
  maxPromptTokens: number | null
  maxCompletionTokens: number | null
  maxPromptImages: number | null
  maxTokensPerImage: number | null
  limitRpm: number | null
  limitRpd: number | null

  // Pricing (converted to numbers for comparison)
  costPrompt: number
  costCompletion: number
  costImage: number
  costRequest: number
  costInputCacheRead: number | null
  costInputCacheWrite: number | null
  costInternalReasoning: number | null

  // Business Model
  isFree: boolean
  isByok: boolean              // Bring Your Own Key

  // Status & Quality
  isDeranked: boolean
  status: number | null        // 0 = healthy, higher = issues
  moderationRequired: boolean

  // Technical Features
  canAbort: boolean
  supportedParameters: string[] // JSON array for query flexibility

  // Data Policy **[PROPOSAL]** (simplified, endpoint-specific)
  trainsOnData: boolean        // Key privacy concern
  retainsPrompts: boolean      // Key privacy concern
  retentionDays: number | null
  requiresUserIds: boolean

  // Performance Metrics (from current snapshot)
  p50Latency: number | null
  p50Throughput: number | null
  requestCount: number | null

  // Timestamps
  modelCreatedAt: string       // When model was first added to OpenRouter
  modelUpdatedAt: string       // When model was last updated
}
```

#### `models` **[PROPOSAL]** - Master Model Registry

```typescript
{
  // Identity
  id: string                   // Our definitive model identifier
  hfSlug: string | null        // Hugging Face reference
  epoch: number               // When this data was last valid

  // Display
  name: string
  shortName: string
  author: string
  description: string
  group: string               // GPT, Claude, Llama, etc.
  warningMessage: string | null

  // Capabilities
  contextLength: number       // Base model context length
  inputModalities: string[]   // text, image, file
  outputModalities: string[]  // Always text currently
  supportsImages: boolean     // Computed from modalities
  supportsFiles: boolean      // Computed from modalities

  // Technical
  instructType: string | null
  hasReasoningConfig: boolean // Whether model has thinking tokens
  reasoningStartToken: string | null
  reasoningEndToken: string | null

  // Metadata
  modelVersionGroupId: string | null
  createdAt: string
  updatedAt: string
  firstSeenEpoch: number      // When we first captured this model
}
```

### Time Series Tables **[PROPOSAL]**

#### `endpoint_metrics` - Performance & Availability Over Time

```typescript
{
  endpointId: string
  epoch: number
  date: string // YYYY-MM-DD for easier grouping

  // Performance
  p50Latency: number | null
  p50Throughput: number | null
  requestCount: number | null

  // Availability
  uptimePercentage: number | null

  // Status
  status: number | null
  isActive: boolean // Was endpoint available this period
}
```

#### `model_usage_stats` **[PROPOSAL]** - Daily Token Usage

```typescript
{
  modelId: string
  date: string // YYYY-MM-DD

  // Usage Metrics (may need deduplication)
  requestCount: number
  promptTokens: number
  completionTokens: number
  totalTokens: number // Computed sum
  reasoningTokens: number // For thinking models

  // Computed Insights
  avgTokensPerRequest: number
  avgPromptLength: number
  avgCompletionLength: number

  capturedEpoch: number // Source snapshot
}
```

#### `app_usage` **[PROPOSAL]** - Application Usage Time Series

```typescript
{
  modelId: string
  appName: string
  date: string
  epoch: number

  // Usage metrics
  requestCount: number
  rank: number // App's rank for this model on this date
}
```

### Reference Tables **[PROPOSAL]**

#### `providers` - Provider Information

```typescript
{
  slug: string // Primary key
  displayName: string
  headquarters: string | null // Country code
  epoch: number // When this data was last valid

  // Capabilities
  hasChatCompletions: boolean
  hasCompletions: boolean
  isAbortable: boolean
  isMultipartSupported: boolean
  byokEnabled: boolean

  // Policies
  moderationRequired: boolean
  statusPageUrl: string | null

  // Privacy Defaults **[PROPOSAL]** (simplified)
  defaultTrainsOnData: boolean
  defaultRetainsPrompts: boolean
  defaultRetentionDays: number | null

  // Metadata
  iconUrl: string | null
  firstSeenEpoch: number
}
```

#### `model_authors` **[PROPOSAL]** - Author/Organization Information

```typescript
{
  slug: string // Primary key (openai, anthropic, etc.)
  displayName: string | null
  description: string | null
  epoch: number // When this data was last valid

  // Computed Statistics (may be calculated separately)
  totalModels: number
  totalEndpoints: number
  avgDailyRequests: number // Computed from usage stats

  // Metadata
  firstSeenEpoch: number
}
```

## Processing Pipeline **[PROPOSAL]**

### Processing State Management

```typescript
interface ProjectionState {
  currentEpoch: number // Latest fully processed epoch
  processingEpoch: number | null // Currently being processed
  lastProcessedAt: number // Timestamp of last successful processing

  // Statistics
  totalEntitiesProcessed: number
  validationErrorCount: number
  transformationErrorCount: number
}
```

### Stage 1: Trigger & Coordination

- Wait for snapshot completion signal (all sync-status entries show "completed")
- Check if epoch has already been processed (idempotency)
- Set processing state and begin pipeline

### Stage 2: Raw Data Collection & Validation

- Query snapshots for all required resource types for the target epoch
- Use Zod schemas to validate each resource type
- **Continue processing on validation failures** - log errors but don't halt
- Track validation success rates per resource type

### Stage 3: Data Transformation

- Normalize OpenRouter identifiers to our clean model IDs
- Denormalize model capabilities into endpoint records
- Convert string prices to numbers using parseFloat()
- **[EXPLORATION NEEDED]** Flatten data policy objects - need to examine actual structures
- Compute derived fields (boolean flags, totals, averages)

### Stage 4: Change Detection **[PROPOSAL]**

- Compare new processed data against previous epoch using JSON diffs
- Generate change records for significant modifications
- Changes are stored as JSON diffs, not processed into alerts
- UI will handle thresholds and notifications

### Stage 5: Table Updates

- **Upsert current state** into primary tables (endpoints, models, providers, authors)
- **Insert time series data** (never update, always append)
- Update `firstSeenEpoch` for new entities
- **Don't delete missing entities** - their older epoch values indicate unavailability

## Entity Lifecycle **[PROPOSAL]**

### Availability Detection

Entities (models, endpoints) may disappear from OpenRouter temporarily or permanently:

- **Missing from snapshot**: Don't update the entity's epoch - it retains its previous value
- **Query filtering**: Use `epoch >= targetEpoch` to show only currently available entities
- **UI indication**: Entities with old epochs can be marked as "last seen X hours ago"
- **Return behavior**: If an entity reappears, it gets a new epoch and becomes "current" again

### Change Tracking

```typescript
interface EntityChange {
  entityType: 'model' | 'endpoint' | 'provider' | 'author'
  entityId: string
  epoch: number
  changeType: 'created' | 'updated' | 'disappeared'

  // JSON diff of the changes
  diff: {
    added?: Record<string, any>
    modified?: Record<string, { old: any; new: any }>
    removed?: Record<string, any>
  }

  // Computed metadata
  hasSignificantChanges: boolean // UI can define "significant"
}
```

## Query Optimization **[PROPOSAL]**

### Required Indexes

```typescript
// Primary query patterns
endpoints: {
  by_model_epoch: ['modelId', 'epoch']
  by_provider_epoch: ['providerName', 'epoch']
  by_capabilities_epoch: ['supportsImages', 'supportsFiles', 'epoch']
  by_business_model_epoch: ['isFree', 'trainsOnData', 'epoch']
  by_current: ['epoch'] // for filtering to current data
  by_status: ['status', 'epoch']
}

models: {
  by_author_epoch: ['author', 'epoch']
  by_current: ['epoch']
}

endpoint_metrics: {
  by_endpoint_date: ['endpointId', 'date']
  by_date_epoch: ['date', 'epoch']
}
```

### Query Patterns

```typescript
// Get currently available endpoints supporting images
const currentEpoch = await getCurrentProjectionEpoch()
const imageEndpoints = await ctx.db
  .query('endpoints')
  .withIndex('by_capabilities_epoch', (q) => q.eq('supportsImages', true).gte('epoch', currentEpoch))
  .collect()

// Get endpoint history including when it disappeared
const endpointHistory = await ctx.db
  .query('endpoints')
  .withIndex('by_model_epoch', (q) => q.eq('modelId', 'openai/gpt-4'))
  .collect()
```

## Implementation Strategy

### Phase 1: Core Infrastructure **[PROPOSAL]**

- Implement projection state management
- Build basic endpoint and model processing
- Establish epoch-based upsert patterns
- Create simple change detection

### Phase 2: Enhanced Processing **[PROPOSAL]**

- Add time series tables (metrics, usage stats)
- Implement data policy exploration and processing
- Add provider and author processing
- Enhance change detection with JSON diffs

### Phase 3: Advanced Features **[PROPOSAL]**

- Add app usage tracking
- Implement processing recovery mechanisms
- Add data quality monitoring
- Optimize for large-scale historical reprocessing

### Error Handling Philosophy

Following the core philosophy:

- **Log everything, fail nothing**: Validation and processing errors are logged but don't halt processing
- **Partial data is valuable**: Store what we can process successfully
- **Regeneration over migration**: When things go wrong, regenerate from snapshots
- **Temporal recovery**: Can reprocess any historical period to fix issues

This projection system transforms our comprehensive snapshot data into fast, queryable structures while maintaining the flexibility to adapt as OpenRouter's APIs and our understanding evolve.

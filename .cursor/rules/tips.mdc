---
description:
globs:
alwaysApply: true
---

# Tips

## Zod

- Zod v4 has been released! The API is mainly the same but it's much faster, and more convenient native error formatting.
- `z4.strictObject` and `z4.looseObject` should be used instead of `.strict()` and `.passthrough()`
- We're using `z4` imported like `import z4 from 'zod/v4'` to make this clearer.
- The `zod` package actually still contains Zod v3 imported from its regular location.

## OpenRouter Zod Schemas

- When validating API artifacts, we utilise zod's characteristic of pruning properties from the result data if they are not specified in the schema, removing unnecessary values and duplicated/embedded entities from the source data.
- 'Strict' schemas intend to validate the full structure of each major entity, existing to confirm that our understanding of the structure of each artifact is correct and up to date.
- Do not export subcomponent schemas, ie. nested objects, unless there is a specific reason to do so (there usually is not).

## Project Commands

- We use bun as a package manager, and script runner.
- `bun typecheck && bun lint` to check your work.
- If you have done significant work in the convex folder, `bun convex dev --once`
- Don't try to start the dev server. It's already running in my terminal.

## Convex

- Convex uses their own V8 runtime, similar to Cloudflare Workers, but with better support for language features.
- Map.groupBy is supported, and it is an incredible way to group then iterate through items, but we can't use it in the browser.
- bun is used as a package manager only. We don't use the bun runtime.
- Convex will throw during compile if it finds any dir/file with a dash in it (e.g. `my-file.ts`), so use camelCase.
- Convex queries/mutations/actions can't be used in files with dots in the name (e.g. `my.file.ts`), so use camelCase.

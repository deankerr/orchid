---
alwaysApply: true
---

# Web Development Framework Updates for 2025 AI Coding Assistants

## React 19 - Major Changes

### forwardRef No Longer Required

Function components can now accept `ref` as a regular prop, eliminating `forwardRef` boilerplate in most cases.

**Note: `forwardRef` is still supported for backwards compatibility. Leave in place for existing components.**

```tsx
// NEW (React 19)
function MyInput({
  placeholder,
  ref,
}: {
  placeholder?: string
  ref?: React.Ref<HTMLInputElement>
}) {
  return <input placeholder={placeholder} ref={ref} />
}
```

### New `use` Hook

The `use` hook reads resources like Promises or context values directly in render, supporting conditional usage.

```tsx
import { use } from 'react'

// Reading Promises with Suspense
function Comments({ commentsPromise }: { commentsPromise: Promise<Comment[]> }) {
  const comments = use(commentsPromise) // Suspends until resolved
  return comments.map((comment) => <p key={comment.id}>{comment.text}</p>)
}

// Conditional context usage (impossible with useContext)
function Heading({ children }: { children: React.ReactNode }) {
  if (children == null) return null

  const theme = use(ThemeContext) // Can be called after early return
  return <h1 style={{ color: theme.color }}>{children}</h1>
}
```

### Simplified Context Provider Syntax

Context objects can now be rendered directly as providers, eliminating the `.Provider` wrapper.

```tsx
import { createContext, use } from 'react'

const ThemeContext = createContext('light')

// NEW (React 19) - Context rendered directly
function App({ children }: { children: React.ReactNode }) {
  return <ThemeContext value="dark">{children}</ThemeContext>
}

// Consuming with use hook (preferred over useContext)
function ThemedButton() {
  const theme = use(ThemeContext)
  return <button className={`btn-${theme}`}>Click me</button>
}
```

## React Compiler - Production Ready

### Current Status (2025)

React Compiler is in Release Candidate phase, production-ready and deployed at Meta across Instagram, Facebook, and Threads.

### What It Does

Automatically memoizes React components and hooks through build-time static analysis, eliminating manual `useMemo`, `useCallback`, and `React.memo` usage. Requires strict adherence to the Rules of React.

**TODO: Incompatible with Tanstack Table. This project will require a partial approach.**

### Enabling React Compiler

```javascript
// Next.js (Recommended)
const nextConfig = {
  experimental: {
    reactCompiler: true, // Enable for all components
  },
}
```

### Compiler Directives

```javascript
// Opt out specific components
function MyComponent() {
  'use no memo' // Compiler will skip this component
  return <div>Not optimized</div>
}

// Opt in specific components (annotation mode)
function MyComponent() {
  'use memo' // Explicitly opt into compilation
  return <div>Optimized</div>
}
```

## Next.js 15 - Breaking Changes

### Async Request APIs (Breaking Change)

All request-specific APIs now return Promises and must be awaited.

```typescript
// NEW (Next.js 15)
export default async function Page({
  params,
  searchParams
}: {
  params: Promise<{ slug: string }>;
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}) {
  const { slug } = await params;
  const { query } = await searchParams;
  return <h1>{slug}</h1>;
}
```

### Caching Defaults Inverted (Breaking Change)

Requests are now uncached by default, opposite of Next.js 14.

```typescript
// Next.js 15 - Uncached by default
const data = await fetch('https://api.example.com/data')

// Next.js 15 - Opt into caching
const data = await fetch('https://api.example.com/data', {
  cache: 'force-cache',
})

// Route-level caching configuration
export const fetchCache = 'default-cache'
```

### Partial Prerendering (PPR) Experimental

Combines static and dynamic rendering in the same route.

```typescript
export const experimental_ppr = true;

export default function Page() {
  return (
    <>
      <StaticHeader /> {/* Prerendered */}
      <Suspense fallback={<Loading />}>
        <DynamicContent /> {/* Streamed */}
      </Suspense>
    </>
  );
}
```

### Enhanced TypeScript Support

```typescript
// Auto-generated type helpers
export default async function Page(props: PageProps<'/blog/[slug]'>) {
  const { slug } = await props.params;
  return <h1>Blog post: {slug}</h1>;
}
```

## Tailwind CSS 4 - CSS-First Configuration

### CSS-Based Configuration System

Replaces JavaScript config files with CSS-first approach using `@theme` directive. `tailwind.config.js` is no longer required.

```css
/* NEW (v4) */
/* globals.css */
@import 'tailwindcss';

@theme {
  --color-custom-blue: #1e40af;
  --color-brand-primary: #3b82f6;
  --font-display: Inter, sans-serif;
  --spacing-18: 4.5rem;
}
```

### Utility Class Renames (Breaking Changes)

Several utility classes renamed for consistency:

| v3 Utility     | v4 Utility       |
| -------------- | ---------------- |
| `shadow-sm`    | `shadow-xs`      |
| `shadow`       | `shadow-sm`      |
| `blur-sm`      | `blur-xs`        |
| `blur`         | `blur-sm`        |
| `rounded-sm`   | `rounded-xs`     |
| `rounded`      | `rounded-sm`     |
| `outline-none` | `outline-hidden` |

### New Modern CSS Features

```html
<!-- Container Queries -->
<div class="@container">
  <div class="grid grid-cols-1 @sm:grid-cols-3 @lg:grid-cols-4">
    <!-- Responsive based on container, not viewport -->
  </div>
</div>

<!-- 3D Transforms -->
<div class="perspective-distant">
  <article class="rotate-x-51 rotate-z-43 transform-3d">
    <!-- 3D transformed content -->
  </article>
</div>

<!-- Enhanced Gradients -->
<div class="bg-linear-45 from-indigo-500 to-pink-500"></div>
<div class="bg-radial-[at_25%_25%] from-white to-zinc-900"></div>
```

## ECMAScript 2024 - Finalized Features

**Note: Safe and recommended for backend use, discouraged for frontend.**

### Object.groupBy() and Map.groupBy()

Groups array elements into objects or Maps based on callback results.

```javascript
const inventory = [
  { name: 'apple', type: 'fruit', quantity: 5 },
  { name: 'carrot', type: 'vegetable', quantity: 3 },
]

// Object.groupBy - returns plain object
const byType = Object.groupBy(inventory, (item) => item.type)
// Result: { fruit: [{...apple}], vegetable: [{...carrot}] }

// Map.groupBy - returns Map, supports any key types
const byQuantity = Map.groupBy(inventory, (item) => (item.quantity > 3 ? 'high' : 'low'))
```

### Promise.withResolvers()

Returns promise with external resolve/reject functions for complex control flow.

```javascript
const { promise, resolve, reject } = Promise.withResolvers()

setTimeout(() => resolve('Done!'), 1000)
const result = await promise // "Done!"

// Event-based promise resolution
function waitForButtonClick(buttonId) {
  const { promise, resolve, reject } = Promise.withResolvers()
  const button = document.getElementById(buttonId)

  button.addEventListener('click', () => resolve('clicked'))
  setTimeout(() => reject('timeout'), 5000)

  return promise
}
```

### RegExp /v Flag (unicodeSets)

Enhanced regex flag supporting Unicode string properties and set operations.

```javascript
// Multi-codepoint emoji support
const emojiRegex = /^\p{RGI_Emoji}$/v
emojiRegex.test('üßë‚Äçüíª') // true

// Set operations in character classes
const excludeDigits = /^[\p{Letter}--[a-f]]$/v
excludeDigits.test('g') // true
excludeDigits.test('a') // false
```

### String Well-Formed Unicode Methods

Checks and ensures strings contain only well-formed Unicode sequences.

```javascript
'hello'.isWellFormed() // true
'\uD800test'.isWellFormed() // false (lone surrogate)

'\uD800test'.toWellFormed() // "ÔøΩtest" (replaces with replacement char)
```

## CSS Baseline Newly Available (2023-2025)

### Container Queries

Responsive design based on container size rather than viewport.

```css
.card-container {
  container-type: inline-size;
  container-name: card;
}

@container card (min-width: 400px) {
  .card {
    display: grid;
    grid-template-columns: 200px 1fr;
  }
}

/* Container query units */
.title {
  font-size: clamp(1.5rem, 4cqi, 3rem); /* 4% of container inline size */
}
```

### CSS :has() Selector

Parent selector enabling styling based on children.

```css
/* Style article containing h2 */
article:has(h2) {
  border-left: 4px solid blue;
}

/* Style form when checkbox is checked */
.form:has(input[type='checkbox']:checked) {
  background: lightgreen;
}

/* Complex conditions */
.card:has(.premium):has(.available) {
  border: 2px solid gold;
}
```

### CSS Subgrid

Nested grids inherit track sizing from parent grid.

```css
.main-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
}

.card {
  display: grid;
  grid-template-columns: subgrid; /* Inherits parent columns */
  grid-column: 1 / -1;
}
```

### text-wrap: balance

Automatically balances line lengths in multi-line text.

```css
h1,
h2,
h3 {
  text-wrap: balance;
  max-inline-size: 50ch;
}
```

### transition-behavior: allow-discrete

Enables smooth transitions for discrete properties like display.

```css
.modal {
  display: none;
  opacity: 0;
  transition:
    opacity 0.3s ease,
    display 0.3s ease;
  transition-behavior: allow-discrete;
}

.modal.open {
  display: block;
  opacity: 1;
}
```

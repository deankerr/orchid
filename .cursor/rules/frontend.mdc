---
globs: components/**,app/**
alwaysApply: false
---

# Frontend Development Guide

## Example

```tsx
import { cn } from '@/lib/utils'

export function LabeledBox({
  label,
  className,
  children,
  ...props
}: { label?: string } & React.ComponentProps<'div'>) {
  return (
    <div
      className={cn('bg-card text-card-foreground space-y-2 rounded-sm border p-2', className)}
      {...props}
    >
      {label && <div className="text-muted-foreground font-mono text-sm uppercase">{label}</div>}
      {children}
    </div>
  )
}
```

## Target Audience

ORCHID serves highly technical users who work with OpenRouter and LLMs professionally:

- Deep understanding of AI model concepts (variables, parameters, context lengths, quantization)
- Interested in comprehensive pricing details (cache reads, reasoning tokens, structured outputs)
- Value technical precision over "friendly" explanations
- Will copy/paste values (model slugs, API parameters) directly into their code

## Design Philosophy

- Stylish technical aesthetic.
- Directly inspired by Vercel, shadcn.com, and Radix Themes.
- Dark, monochromatic, functional, and practical UI.
- Dense, rich and data heavy, tabular elements. Minimal 'marketing' style elements.
- Brand logos and badges add splashes of color.
- Avoid excessive padding, border radius (most elements use `rounded-sm`), and shadows.
- Heavy use of monospace font used for data display and aesthetic flourish.
- Primarily intended for desktop usage. Mobile optimization is a low priority.

## Component Guidelines

### Default Styling

```css
/* globals.css */
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
```

- Intelligently apply classes like `font-mono` at a component root level, rather than specifying on all sub-elements.

### Structure

- Use a shadcn/ui-inspired structure for components, a single file which exports composable component parts, allowing for dynamic customization.
- Use named exports only. NEVER use default exports.

### Component File Structure/Locations

- Route components (layouts, pages): `app/[relevant directory]`
- Major single file/unique components: `components/`
- Major multi-file components: `components/<component-name>`
- Shared/custom UI components: `components/shared`
- shadcn/ui components only: `components/ui`
- Mixed/unclear: `components/`
- No barrel files.

## React 19 / Next.js 15

- ONLY when a page is reading search params with nuqs, e.g. `useQueryState`, the client component page must be wrapped in `<Suspense>` in the server-side `page.tsx`. No fallback is required, as there is no actual wait for any external data.

---
description: Frontend structure, style guide, conventions, colors, tokens, tips
alwaysApply: false
---

# Frontend Development Guide

## Target Audience

ORCHID serves highly technical users who work with OpenRouter and LLMs professionally:

- Deep understanding of AI model concepts (variables, parameters, context lengths, quantization)
- Interested in comprehensive pricing details (cache reads, reasoning tokens, structured outputs)
- Value technical precision over "friendly" explanations
- Need data that's easily accessible, comparable, and actionable
- Will copy/paste values (model slugs, API parameters) directly into their code

## Design Philosophy

### Technical Aesthetic

- **Stark, functional appearance**: Modern terminal aesthetic without literal shell elements
- **Typography**: Monospace fonts for technical content
- **Color palette**: Monochromatic base with strategic color usage
- **Spacing**: Minimal padding, clean layouts
- **Geometry**: Sharp corners, avoid rounded elements

### Color Strategy

- **Text**: Primary place for color (status indicators, variant labels)
- **Branding**: Model and provider logos provide natural color accents
- **Backgrounds**: Minimal use of background colors
- **Effects**: Avoid shadows and other visual effects

### Content Presentation

- **Raw values**: Display technical identifiers (model slugs, API parameters) directly
- **Data density**: Prioritize information density over mobile optimization
- **Comparability**: Structure data for easy comparison across models/providers

## Component Guidelines

### UI Components

- **Theme adherence**: Use standard shadcn/ui theme variables exclusively
- **No customization**: Avoid custom colors, background colors, border radius
- **Theme extensions**: Add new theme colors to [globals.css](mdc:app/globals.css) when needed
- **Component location**: Add custom components to root `components/` folder, not `components/ui/`

### Default Styling

- Values like `font-mono` are defined at the root level of components where in use, allowing it to cascade down into sub-components like Buttons, Badges, etc. Do not add these classes to every internal element.
- `border-border` is default, no need to specify anywhere
- Badges: `text-xs` is the default size
- Follow established patterns across the application

## Development Priorities

- **Desktop-first**: Mobile optimization is not a current focus
- **Data-heavy patterns**: Optimize for information-dense interfaces
- **Technical accuracy**: Prioritize correctness over simplification
- **Developer experience**: Enable easy copying of technical values

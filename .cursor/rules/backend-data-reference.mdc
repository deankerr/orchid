---
description:
globs:
alwaysApply: true
---

# ORCHID Backend Data Reference

This document serves as the authoritative reference for understanding ORCHID's data architecture, the OpenRouter ecosystem, and how our entities interact. It corrects common misconceptions and provides accurate context for development.

## ORCHID System Overview

### Core Purpose

ORCHID aggregates and tracks AI model availability data from OpenRouter, creating a historical record of the evolving AI model ecosystem. We capture snapshots of what's available, when it changes, and how usage patterns evolve over time.

### Key Architectural Principles

1. **Snapshot-Based Architecture**: All data is captured in hourly snapshots, allowing point-in-time reconstruction
2. **Derived State Philosophy**: All processed data can be regenerated from raw snapshots
3. **Historical Preservation**: Models and endpoints that disappear are retained for historical analysis
4. **Query Optimization**: Data is denormalized appropriately for sub-second query performance

### Data Characteristics

- **Lightweight Records**: Most entities contain simple strings, numbers, and identifiers
- **Moderate Volume**: ~400 models, ~700 endpoints, ~60 providers - easily manageable
- **High Change Frequency**: Daily changes in availability, pricing, and capabilities
- **Historical Value**: Tracking when models appear/disappear provides unique insights

## Statistical Analysis

### Entity Counts & Distribution

- **Models**: 395 total
- **Endpoints**: 668 total
- **Providers**: 63 unique providers
- **Model-Endpoint Ratio**: 1.69 endpoints per model (2.52 excluding models with 0 endpoints)

### Model-Endpoint Relationships

- **Models with 0 endpoints**: 130 (32.9%) - Normal state for historical/removed models
- **Models with endpoints**: 265 (67.1%)
- **Distribution**: Most models have 1-2 endpoints
  - 1 endpoint: 149 models (37.7%)
  - 2 endpoints: 55 models (13.9%)
  - 3+ endpoints: 61 models (15.4%)
  - **Maximum**: 23 endpoints (Meta Llama 3.3 70B Instruct)

### String Length Analysis (Frontend Design Considerations)

#### Model Names

- **Longest**: "Nous: DeepHermes 3 Llama 3 8B Preview (free)" (44 chars)

#### Model Slugs (API Identifiers)

- **Longest**: "sentientagi/dobby-mini-unhinged-plus-llama-3.1-8b" (49 chars)

#### Model Permaslugs (Permanent Identifiers)

- **Longest**: "sentientagi/dobby-mini-unhinged-plus-llama-3.1-8b" (49 chars)

#### Provider Names

- **Longest**: "Amazon Bedrock (US-WEST)" (24 chars)

### Variant Analysis

#### Variant Distribution

- **standard**: 244 models (76.0%) - Default production variant
- **free**: 60 models (18.7%) - Free tier offerings
- **beta**: 11 models (3.4%) - Experimental versions
- **thinking**: 4 models (1.2%) - Reasoning-focused variants
- **extended**: 2 models (0.6%) - Enhanced versions

#### Multi-Variant Models

- **Total**: 55 models (13.9%) offer multiple variants

### Provider Distribution

- **Total Providers**: 63 (relatively small, stable dataset)
- **Top 5 providers**: Host 44% of all endpoints (236/668)

## OpenRouter Ecosystem

### What OpenRouter Is

- **Aggregator/Broker**: Connects users to multiple AI providers through a unified API
- **Traffic Director**: Routes requests based on price and reliability
- **Not a Host**: OpenRouter doesn't store or run models themselves

### How OpenRouter Works

1. **Provider Integration**: Each provider (DeepInfra, Together, etc.) offers direct inference services
2. **Unified Access**: OpenRouter provides single API for all providers
3. **Smart Routing**: Cheaper endpoints preferred, slow/unstable endpoints deranked
4. **Dynamic Availability**: Models and endpoints appear/disappear as providers change offerings

### Value Proposition

- **For Users**: Single API, automatic failover, cost optimization
- **For Providers**: Additional traffic, simplified billing, broader reach
- **For ORCHID**: Rich dataset of model availability and usage patterns

## Model Identifiers

Understanding how models are identified is crucial for working with ORCHID data.

### Slug vs Permaslug vs Variant

**Slug**: Human-readable identifier pointing to the latest version

- Example: `claude-3-5-sonnet`, `gpt-4`, `deepseek/deepseek-r1`
- Updates automatically when model versions change

**Permaslug**: Versioned identifier that never changes

- Example: `claude-3-5-sonnet-20241022`, `gpt-4-2024-05-13`
- Locked to specific version
- Often identical to slug (most models don't version frequently)

**Variant**: Different configurations of the same model

- Types: `standard`, `free`, `beta`, `thinking`, `extended`
- Example: `deepseek-r1` has both `standard` and `free` variants
- The `standard` variant is omitted in user-facing APIs

### How Users Specify Models

```
"anthropic/claude-3.5-sonnet"              # Latest version, standard variant
"anthropic/claude-3.5-sonnet-20241022"     # Specific version, standard variant
"anthropic/claude-3.5-sonnet:thinking"     # Latest version, thinking variant
"anthropic/claude-3.5-sonnet-20241022:thinking"  # Most specific form
```

## Entity Reference

### or_endpoints

**Key Characteristics**:

- **Denormalized model data** included to avoid joins
- **Primary query target** for finding available models
- **Each endpoint** represents a specific deployment of a model variant on a provider

**Critical Fields**:

```typescript
{
  uuid: string // Stable identifier
  model_slug: string // Links to model
  model_permaslug: string // Versioned model reference
  model_variant: string // standard/free/beta/etc
  provider_name: string // Human-readable provider
  context_length: number // May differ from model's base
  pricing: {
    // Denormalized for queries
    input: number
    output: number
    // ... other pricing fields
  }
  capabilities: {
    // What this deployment supports
    // ... capability flags
  }
  status: number // Negative = deranked
}
```

### or_models

**Purpose**: Metadata about models, regardless of current availability.

**Key Fields**:

```typescript
{
  slug: string                   // Primary identifier
  permaslug: string             // Versioned identifier
  variants: string[]            // All known variants
  or_created_at: number        // When first seen
}
```

### or_providers

**Purpose**: Links endpoints to data policies and provider metadata. Relatively static.

**Key Characteristics**:

- **63 total records** - one of our smallest datasets
- **Low complexity** - simple metadata and policies
- **Infrequently changing** - providers don't update often

### Supporting Entities

#### or_apps

- **Purpose**: Applications using models through OpenRouter
- **Value**: Shows real-world adoption patterns

### Metrics Tables (Time-Series)

#### or_model_token_stats

- **Granularity**: Daily aggregates per model variant
- **Source**: Returned with author data (can be backfilled)
- **Key Insight**: Usage patterns by model/variant

#### or_model_app_leaderboards

- **Content**: Total usage per app per model
- **Purpose**: Track which apps drive model usage

## Key Insights

### Expected States

- **Models without endpoints**: Normal - indicates historical models or recent removals
- **Missing metrics**: Some models/endpoints have no usage data
- **Identical slug/permaslug**: Most models don't version frequently
